#! /opt/local/bin/perl5.24
#
# Return graded report files to a NYU Classes/Sakai site via HTTPS PUT
# MPL 2015-03-20
#
#
#
# Copyright (C) 2012 Alexis Bienvenue <paamc@passoire.fr>
#
# This file is part of Auto-Multiple-Choice
#
# Auto-Multiple-Choice is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 2 of
# the License, or (at your option) any later version.
#
# Auto-Multiple-Choice is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Auto-Multiple-Choice.  If not, see
# <http://www.gnu.org/licenses/>.

use Getopt::Long;

use AMC::Basic;
use AMC::NamesFile;
use AMC::Data;
use AMC::DataModule::report ':const';
use AMC::Gui::Avancement;
use AMC::Substitute;

use Data::Dumper;

use Module::Load;

use Email::MIME;
use Email::Address;
use Email::Sender;
use Email::Sender::Simple qw(sendmail);

use File::Basename;
use File::Temp qw/tempfile/;

use XML::Simple;

my $project_dir='';
my $data_dir='';
my $students_list='';
my $list_encoding='UTF-8';
my $csv_build_name='';
my $ids_file='';
my $email_column='';
my $sender='';
my $transport='sendmail';
my $sendmail_path='/usr/sbin/sendmail';
my $smtp_host='smtp';
my $smtp_port=25;
my $text='';
my $subject='';
my $project_name='';
my $cc='';
my $bcc='';
my $exam_code='';
my @attach_files=();

@ARGV=unpack_args(@ARGV);
@ARGV_ORIG=@ARGV;

GetOptions("project=s"=>\$project_dir,
	   "project-name=s"=>\$project_name,
	   "data=s"=>\$data_dir,
	   "students-list=s"=>\$students_list,
	   "list-encoding=s"=>\$list_encoding,
	   "csv-build-name=s"=>\$csv_build_name,
	   "ids-file=s"=>\$ids_file,
	   "email-column=s"=>\$email_column,
	   "sender=s"=>\$sender,
	   "text=s"=>\$text,
	   "subject=s"=>\$subject,
	   "transport=s"=>\$transport,
	   "sendmail-path=s"=>\$sendmail_path,
	   "smtp-host=s"=>\$smtp_host,
	   "smtp-port=s"=>\$smtp_port,
	   "debug=s"=>\$debug,
	   "progression=s"=>\$progress,
	   "progression-id=s"=>\$progress_id,
	   "attach=s"=>\@attach_files,
	   "cc=s"=>\$cc,
	   "bcc=s"=>\$bcc,
	   "dry-run!"=>\$dry_run,
	   "exam-code=s"=>\$exam_code
	   );

set_debug($debug);

debug "Parameters: ".join(" ",map { "<$_>" } @ARGV_ORIG);

sub error {
  my ($text)=@_;
  debug "AMC-sendmail ERROR: $text";
  print "ERROR: $text\n";
  exit(1);
}

sub parse_add {
  my ($s)=@_;
  return(map { $_->address(); }
	 (Email::Address->parse($s)));
}

sub mydo {
   my @cmd = @_;
   if ($dry_run) {
       print "\n[dry-run]\$", join (" ", @cmd), "\n";
   } else {
       system(@cmd);
   }
}

$project_dir = "." if (!-d $project_dir);

# read options from project directory
$xml = new XML::Simple;
$project_options = $xml->XMLin($project_dir . "/options.xml");


# Get the "document stem" from the 'exam code' option or the TeX source file
# TODO: could be a command-line option with this as the default
# the default source file name is "source.tex" though.
# other options: 'nom_examen' is a human-readable form of the exam name, e.g., "Quiz 5"
$exam_code=$project_options->{'code_examen'} if not $exam_code;
$texsrc=$project_options->{'texsrc'};
$texsrc =~ s/%PROJET/$project_dir/;
$docstem = $exam_code ? $exam_code : fileparse($texsrc,'.tex');
print "docstem=$docstem\n";

# set an owner password
# for a new one:
# $ curl -0 "http://www.random.org/passwords/?num=1&len=8&format=plain&rnd=new"
$owner_pw="CxYXLXVY";

$program_name=basename($0,".pl");

$data_dir="$project_dir/data" if($project_dir && !$data_dir);


# student list
# If not specified on CL, look in options.xml
if (!-f $students_list) {
    $students_list=$project_options->{'listeetudiants'};
    $students_list =~ s/%HOME/$ENV{'HOME'}/;
}
error("students list not found:$students_list.  (Did you save?)") if(!-f $students_list);

my $students=AMC::NamesFile::new($students_list,
				 'encodage'=>$list_encoding,
				 "identifiant"=>$csv_build_name);

error("data directory not found: $data_dir") if(!-d $data_dir);

my %ids=();
if(-f $ids_file) {
  debug "provided IDS:";
  open(IDS,$ids_file);
  while(<IDS>) {
    chomp;
    debug "[$_]";
    $ids{$_}=1;
  }
  close(IDS);
} else {
  debug "IDS file $ids_file not found";
}

my $avance=AMC::Gui::Avancement::new($progress,'id'=>$progress_id);

my $data=AMC::Data->new($data_dir);
my $report=$data->module('report');
my $assoc=$data->module('association');
my $scoring=$data->module('scoring');

my $subst=AMC::Substitute::new('assoc'=>$assoc,'scoring'=>$scoring,
			       'names'=>$students,
			       'name'=>$project_name);

$data->begin_read_transaction('Mail');
my $subdir=$report->get_dir(REPORT_ANNOTATED_PDF);

my $pdf_dir="$project_dir/$subdir";

error("PDF directory not found: $pdf_dir") if(!-d $pdf_dir);

my $key=$assoc->variable('key_in_list');
my $r=$report->get_associated_type(REPORT_ANNOTATED_PDF);

my $nn=1+$#$r;
if($ids_file) {
  my @i=(keys %ids);
  $nn=1+$#i;
}
my $delta=($nn>0 ? 1/$nn : 1);

my @attachments=();

for my $f (@attach_files) {
  if(-f $f) {
    my $name=$f;
    $name =~ s/.*\///;
    my $body='';
    open(ATT,$f);
    while(<ATT>) { $body.=$_; }
    close(ATT);
    push @attachments,
      Email::MIME->create(attributes=>
			  {filename     => $name,
			   content_type => file_mimetype($f),
			   encoding     => "base64",
			   name         => $name,
			   disposition  => "attachment",
			  },
			  body => $body,
			    );
  } else {
    debug "ERROR: Cannot attach inexistant file $f";
  }
}

STUDENT: for my $i (@$r) {
  my ($s)=$students->data($key,$i->{'id'});
  my $dest=$s->{'NetID'};
  print "Loop: ID $i->{'id'} DEST [$dest]\n";
  debug "Loop: ID $i->{'id'} DEST [$dest]";
  if($ids_file && !$ids{$i->{'id'}}) {
    debug "Skipped";
    next STUDENT;
  }
  if($dest) {
    my $file=$pdf_dir.'/'.$i->{'file'};
    my $destfile = $s->{'surname'} . '__' . $s->{'name'} . '_' . $docstem . '.pdf';
    $destfile =~ s/ /_/g;
    # print "destfile=$destfile\n";
    my $site = $s->{'site'};
    # print "site=$site\n";
    debug "  FILE=$file";

    if(-f $file) {

      $template = $program_name . '-XXXX';
      my ($tfh1, $tempfile1) = tempfile( $template, SUFFIX => '.pdf', UNLINK=>1);
      # Attach
      print "Creating payload...";
      mydo ("pdftk",
          $file,
          @attach_files,
          "cat",
          "output",
          $tempfile1,
      );
      print "done.\n";


      # Encrypt
      print "Encrypting payload...";
      my ($tfh2, $tempfile2) = tempfile( $template, SUFFIX => '.pdf', UNLINK=>1);
      mydo ("gs",
              "-sDEVICE=pdfwrite",
              "-dPDFSETTINGS=/default",
              "-dAutoRotatePages=/None",
              "-dNOPAUSE",
              "-dQUIET",
              "-dBATCH",
              '-sOwnerPassword=' . $owner_pw,
              "-sOutputFile=" . $tempfile2,
              $tempfile1);
       print "...done.\n";

       # Upload
       $newurl = "https://newclasses.nyu.edu/dav/group-user/" . $site .  "/" . $s->{'NetID'} . "/" . $destfile;
       print "Uploading to $newurl...";
       mydo("curl",
               "--netrc",
               "-T",
               $tempfile2,
               $newurl);
       print "...done.\n";

      $status = $?;
      # $m = $!;
      print "$status [$i->{'id'}] $m\n";
      debug "$status [$i->{'id'}] $m";
    } else {
      debug "No file: $file";
    }
  } else {
    debug "No dest";
  }
  $avance->progres($delta);
}

$data->end_transaction('Mail');

$avance->fin();
